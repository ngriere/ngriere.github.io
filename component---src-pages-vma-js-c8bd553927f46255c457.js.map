{"version":3,"file":"component---src-pages-vma-js-c8bd553927f46255c457.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/social.js","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/vma-calculator.js","webpack://gatsby-starter-blog/./src/pages/vma.js"],"sourcesContent":["\r\nimport * as React from \"react\"\r\nimport {graphql, useStaticQuery} from \"gatsby\"\r\nimport {StaticImage} from \"gatsby-plugin-image\"\r\n\r\nconst Social = () => {\r\n    const data = useStaticQuery(graphql`\r\n    query SocialQuery {\r\n      site {\r\n        siteMetadata {\r\n          social {\r\n            linkedin\r\n            github\r\n            strava\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n    const social = data.site.siteMetadata?.social;\r\n\r\n    return (\r\n        <div>\r\n            Follow me here:\r\n            <a href={`https://www.linkedin.com/${social?.linkedin || ``}`} className='social-logo'>\r\n                <StaticImage\r\n                    layout=\"fixed\"\r\n                    formats={[\"auto\", \"webp\", \"avif\"]}\r\n                    src=\"../images/linkedin-logo.png\"\r\n                    width={32}\r\n                    height={32}\r\n                    quality={95}\r\n                    alt=\"LinkedIn profile\"\r\n                />\r\n            </a>\r\n            <a href={`https://github.com/${social?.github || ``}`} className='social-logo'>\r\n                <StaticImage\r\n                    layout=\"fixed\"\r\n                    formats={[\"auto\", \"webp\", \"avif\"]}\r\n                    src=\"../images/github-logo.png\"\r\n                    width={32}\r\n                    height={32}\r\n                    quality={95}\r\n                    alt=\"Github profile\"\r\n                />\r\n            </a>\r\n            <a href={`https://www.strava.com/athletes/${social?.strava || ``}`} className='social-logo'>\r\n                <StaticImage\r\n                    layout=\"fixed\"\r\n                    formats={[\"auto\", \"webp\", \"avif\"]}\r\n                    src=\"../images/strava-logo.png\"\r\n                    width={32}\r\n                    height={32}\r\n                    quality={95}\r\n                    alt=\"Strava profile\"\r\n                />\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Social\r\n","/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport {graphql, useStaticQuery} from \"gatsby\"\r\nimport {StaticImage} from \"gatsby-plugin-image\"\r\nimport Social from \"./social\"\r\n\r\nconst Bio = () => {\r\n    const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n    // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n    const author = data.site.siteMetadata?.author\r\n\r\n    return (\r\n        <div className=\"bio\">\r\n            <StaticImage\r\n                className=\"bio-avatar\"\r\n                layout=\"fixed\"\r\n                formats={[\"auto\", \"webp\", \"avif\"]}\r\n                src=\"../images/profile-pic.png\"\r\n                width={50}\r\n                height={50}\r\n                quality={95}\r\n                alt=\"Profile picture\"\r\n            />\r\n            {author?.name && (\r\n                <p>\r\n                    Howdy ! I am <strong>{author.name}</strong>, {author?.summary || null}\r\n                    {` `}\r\n                    <Social/>\r\n                </p>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bio\r\n","import React, {useCallback, useMemo, useState} from \"react\";\r\n\r\nconst AerobicSpeedCalculator = () => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [maxAerobicSpeed, setMaxAerobicSpeed] = useState(\"\");\r\n    const distances = [100, 200, 300, 400, 500, 800, 1000, 1500];\r\n\r\n    const colorCodes = [\r\n        \"#02ff00\",\r\n        \"#56ff00\",\r\n        \"#80ff00\",\r\n        \"#d3ff00\",\r\n        \"#fdff00\",\r\n        \"#ffd700\",\r\n        \"#ffad00\",\r\n        \"#ff8400\",\r\n        \"#ff5a00\",\r\n        \"#ff3000\"\r\n    ];\r\n\r\n    const speeds = useMemo(() => {\r\n        let speeds = [];\r\n        for (let i = 70; i <= 115; i += 5) {\r\n            speeds.push(i / 100);\r\n        }\r\n        return speeds;\r\n    })\r\n\r\n    const handleSubmit = useCallback((event) => {\r\n        event.preventDefault();\r\n        const maxSpeed = parseFloat(inputValue);\r\n        setMaxAerobicSpeed(maxSpeed);\r\n    }, [inputValue, setMaxAerobicSpeed]);\r\n\r\n    const calculateTime = useCallback((distance, speed) => {\r\n        const timeInSeconds = (distance / 1000) / (speed * maxAerobicSpeed) * 60 * 60;\r\n        const timeInMilliseconds = timeInSeconds * 1000;\r\n        const time =  new Date(timeInMilliseconds);\r\n        return time.toISOString().substr(14, 8);\r\n    }, [maxAerobicSpeed]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Aerobic Speed Calculator</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Maximum Aerobic Speed (km/h):\r\n                    <input\r\n                        type=\"number\"\r\n                        value={inputValue}\r\n                        onChange={(event) => setInputValue(event.target.value)}\r\n                    />\r\n                </label>\r\n                <button type=\"submit\">Calculate</button>\r\n            </form>\r\n            <br/>\r\n            {maxAerobicSpeed && (\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Distance (m)</th>\r\n                        {speeds.map((speed, index) => (\r\n                            <th key={speed} bgcolor={colorCodes[index]}>{Math.round(speed * 100)}%</th>\r\n                        ))}\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {distances.map((distance) => (\r\n                        <tr key={distance}>\r\n                            <td>{distance} m</td>\r\n                            {speeds.map((speed, index) => (\r\n                                <td key={speed} bgcolor={colorCodes[index]}>&nbsp;&nbsp;{calculateTime(distance, speed)}&nbsp;&nbsp;</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AerobicSpeedCalculator;\r\n","import * as React from \"react\"\r\nimport {graphql, Link} from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport Bio from \"../components/bio\";\r\nimport AerobicSpeedCalculator from \"../components/vma-calculator\";\r\n\r\nconst VmaPage = ({ data, location }) => {\r\n  const siteTitle = data.site.siteMetadata.title\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <Seo title=\"Maximal Aerobic Speed Calculator\" />\r\n        <Bio />\r\n      <h1>Maximal Aerobic Speed Calculator</h1>\r\n      <p>Maximal Aerobic Speed (MAS) is the speed at which we run when our oxygen consumption (VO2) hits its maximal value (VO2max) during a progressive maximal test. It is a useful index of aerobic capacity, on which to rely to set optimized running training sessions.</p>\r\n      <AerobicSpeedCalculator/>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default VmaPage\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["social","useStaticQuery","site","siteMetadata","href","linkedin","className","S","layout","formats","src","width","height","quality","alt","github","strava","author","name","summary","useState","inputValue","setInputValue","maxAerobicSpeed","setMaxAerobicSpeed","colorCodes","speeds","useMemo","i","push","handleSubmit","useCallback","event","preventDefault","maxSpeed","parseFloat","calculateTime","distance","speed","Date","toISOString","substr","onSubmit","type","value","onChange","target","map","index","key","bgcolor","Math","round","data","location","siteTitle","title"],"sourceRoot":""}